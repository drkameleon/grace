;===============================================
; Grace.art
;
; A minimalistic code editor
; written in Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;-----------------------------------------------
; @file src/grace.art
;===============================================

extensions: # ./"data/extensions.d.art"

getIdealSyntax: function [fpath][
    ext: replace extract.extension fpath "." ""
    (key? extensions ext)? -> return extensions\[ext]
                           -> return "text"
]

openFile: function [][
    filepath: dialog "choose a file"
    not? throws? [
        eval render.template {
            window.V.openFile(
                `<||= filepath ||>`,
                `<||= read filepath ||>`, 
                `<||= getIdealSyntax filepath ||>`
            );
        }
    ]
]

doSth: function [n][
    print ["we are doing something with:" n]
    "yep!"
    eval {console.log("we actually managed to execute something ON the webview!");}
]

export module [
    ;---------------------------
    ; Private methods
    ;---------------------------

    uiapp: function [body][
        ws: ./ "web_server"
        write {
            import 'mimetypes!
            serve.port:18966
        } ++ as.code body ws

        pid: execute.async.args:@[ws] sys\binary
        webview.debug.title: "Grace — Untitled.js" {http://localhost:18966}
        terminate pid
        delete ws
    ]

    ;---------------------------
    ; Public methods
    ;---------------------------

    grace: method.public [][
        \uiapp [
            GET "/" [
                emit.html read ./"ui/main.html"
            ]
            
            GET "/(?<location>.+)" $[location][
                m: mimetype.best location
                c: null

                when [
                    [suffix? location ".art"][
                        m: mimetype.best "json"
                        parsed: (suffix? location ".d.art")? -> # ./location
                                                             -> @ to :block read ./location
                        c: write.json parsed null
                    ]
                    true [
                        c: read ./location
                    ]
                ]

                emit.as: m c
            ]
        ]
    ]
]